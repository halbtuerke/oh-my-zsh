# Path to your oh-my-zsh configuration.
ZSH=$HOME/Coding/git/oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="halbtuerke"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Uncomment this to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want to disable command autocorrection
# DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git autojump brew compleat osx rvm tmuxinator zsh-history-substring-search zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

# Customize to your needs...
autoload -U compinit
compinit

autoload bashcompinit
bashcompinit

fpath=(/usr/local/share/zsh-completions $fpath)
fpath=(/usr/local/share/zsh/site-functions $fpath)
 
DEFAULT_USER="patrick"
 
# Exports {{{
export PATH=~/.wp-cli/bin:/usr/local/share/npm/bin:~/bin:/usr/texbin:/usr/local/sbin:/usr/local/bin:/usr/local/mysql/bin:~/.rvm/bin:$PATH
export WP_CLI_PHP=/Applications/MAMP/bin/php/php5.3.20/bin/php
# export EDITOR='/Users/patrick/bin/vim'
export EDITOR='et'
export PS4='[--- LINE: $LINENO ---] ' # Make shell debugging easier
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8
export CLICOLOR=true
export LSCOLORS=exfxcxdxbxegedabagacad
export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=10000
export HISTFILESIZE=10000
export SAVEHIST=10000
export MANWIDTH=80
export HOMEBREWW_KEEP_INFO=1
# export PROMPT_COMMAND="$PROMPT_COMMAND; history -a; history -c; history -r;"
# export PROMPT_COMMAND=""
# export TERM=xterm-256color

# # Colors in man pages via less
# export LESS_TERMCAP_mb=$'\E[01;31m'
# export LESS_TERMCAP_md=$'\E[01;37m'
# export LESS_TERMCAP_me=$'\E[0m'
# export LESS_TERMCAP_se=$'\E[0m'
# export LESS_TERMCAP_so=$'\E[01;44;33m'
# export LESS_TERMCAP_ue=$'\E[0m'
# export LESS_TERMCAP_us=$'\E[01;32m'
# export MANPAGER="/bin/sh -c \"col -b | vim -c 'set ft=man ts=8 nomod nolist nonu noma' -\""
 
# by default: export WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>'
# we take out the slash, period, angle brackets, dash here.
export WORDCHARS='*?_[]~=&;!#$%^(){}'
 
# Make auto correction a little bit nicer
export SPROMPT="Correct $fg[red]%R$reset_color to $fg[green]%r?$reset_color (Yes, No, Abort, Edit) "
 
# }}}
 
# Options {{{

##############################
# VIM KEYBINDINGS            #
##############################

# bindkey -v
# 
# zle_use_ctrl_d='yes'            # use ctrl-d to switch from insert to cmd mode as this does not
#                                 # require a timeout
# if [[ ${zle_use_ctrl_d} == 'yes' ]]; then
#     setopt ignore_eof
#     bindkey -M viins '^D' ft-vi-cmd
#     bindkey -M vicmd '^D' ft-vi-cmd-cmd
#     bindkey -r '^['
# fi
# # Since I want to bind `vi-cmd-mode' to Ctrl-D (which is what I'm doing in
# # vim and emacs-viper, too) I need to wrap this widget into a user-widget,
# # because only those have an effect with empty command buffers and bindings
# # to the key, which sends `EOF'. This also needs the ignore_eof option set.
# function ft-vi-cmd() {
#     #ft_zle_state[overwrite]=no
#     zle vi-cmd-mode
# }
# zle -N ft-vi-cmd
# 
# function ft-vi-cmd-cmd() {
#     zle -M 'Use `:q<RET>'\'' to exit the shell.'
# }
# 
# zle -N ft-vi-cmd-cmd
# 
# # This setup may change the `ESC' keybinding to `C-d'. That defeats the
# # possibility to exit zsh by pressing `C-d' (which usually sends EOF).
# # With this widget, you can type `:q<RET>' to exit the shell from vicmd.
# function ft-zshexit {
#     [[ -o hist_ignore_space ]] && BUFFER=' '
#     BUFFER="${BUFFER}exit"
#     zle .accept-line
# }
# zle -N ft-zshexit
 
# # Bind 'v' in Normal mode to edit the current line
# autoload -U edit-command-line
# zle -N edit-command-line
# bindkey -M vicmd v edit-command-line
 
# bindkey -M viins "^A" beginning-of-line  # Ctrl-A
# bindkey -M viins "^E" end-of-line        # Ctrl-E
# bindkey -M viins "^K" kill-line
 
# bindkey -M viins '^r' history-incremental-pattern-search-backward
# bindkey -M vicmd '^r' history-incremental-pattern-search-backward
 
# bindkey -M viins '^s' history-incremental-pattern-search-forward
# bindkey -M vicmd '^s' history-incremental-pattern-search-forward
 
##############################
# VIM KEYBINDINGS END        #
##############################

setopt NO_CASE_GLOB             # set ignore case for ls etc
setopt COMPLETEINWORD           # more extensive tab completion
setopt NO_EXTENDED_HISTORY      # don't use the extended history function (bash compatibility)
setopt INCAPPENDHISTORY         # append every history entry immediately to the history file
setopt SHAREHISTORY
setopt HIST_IGNORE_DUPS         # ignore duplicates
setopt HIST_IGNORE_SPACE        # ignore entries which begin with a space
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt AUTO_CD                  # specifying a directory name suffices to cd into it
setopt AUTOPUSHD
setopt PUSHD_IGNORE_DUPS
setopt EXTENDED_GLOB
setopt LIST_PACKED
setopt ALWAYSTOEND              # when complete from middle, move cursor
setopt CORRECT                  # spelling correction
setopt NONOMATCH                # has to do with globbing
setopt RM_STAR_WAIT             # 10 second wait if you do something that will delete everything

REPORTTIME=10                   # report time and if command takes > 10 sec
HISTFILE=~/.bash_history
 
# When offering typo corrections, do not propose anything which starts with an
# underscore (such as many of Zsh's shell functions).
CORRECT_IGNORE='_*'
 
# }}}

# Aliases {{{
source ~/bin/dotfiles/bash/aliases
alias so='source ~/.zshrc'
alias ls=' ls'
alias cd=' cd'
# }}}

# Global aliases {{{

alias -g G="| grep"
alias -g L="| less"
alias -g NUL="> /dev/null 2>&1"
alias -g C="| pbcopy"
alias -g CNT="| wc -l"

# }}}

# Search the complete history {{{
h() {
  if [ -z "$1" ]
  then
      history | tail -20
  else
      fc -l 0 -1 | sed -n "/$1/s/^ */!/p" | tail -n ${2:-100}
  fi
}
alias h=' h'
# }}}

# Pressing enter with no command given runs ls {{{
# http://www.reddit.com/r/zsh/comments/s6t6d/is_there_an_alias_for_an_empty_line/
function empty-buffer-to-ls() {
    if [[ $#BUFFER == 0 ]]; then
        BUFFER="ls"
    fi
}
zle -N zle-line-finish empty-buffer-to-ls
# }}}
 
# Automatically run ls after cd {{{
function chpwd() {
    emulate -L zsh
    ls
}
# }}}
 
# Shortcut and completion to ~/Fast-Access {{{
fa() {
    cd ~/Fast-Access/$1;
}

_fa() {
    _files -W ~/Fast-Access -/;
}
compdef _fa fa
# }}}

# Marked Completion {{{

_marked() {
    _files;
}
compdef _marked mark

# }}}

# Transcode {{{

# transcode a video to 360p H.264 500kbps
#   transcode INPUT OUTPUT
# INPUT = file name
# OUTPUT = new file name without extension (.mp4 is appended automatically) 
function transcode() {
    FILE=$1
    OUTPUT=$2

    /usr/local/bin/ffmpeg -i ${FILE} -vcodec libx264 -vprofile high -preset veryfast -b:v 500k -maxrate 500k -bufsize 1000k -vf scale=-1:360 -threads 0 -acodec libvo_aacenc -b:a 128k ${OUTPUT}.mp4
}

function transcode-size() {
    FILE=$1
    OUTPUT=$2
    SIZE=$3

    /usr/local/bin/ffmpeg -i ${FILE} -vcodec libx264 -vprofile high -preset veryfast -b:v 500k -maxrate 500k -bufsize 1000k -vf scale=${SIZE} -threads 0 -acodec libvo_aacenc -b:a 128k ${OUTPUT}.mp4
}

function rmsub() {
    SUB=$1
    cd ${SUB} && git remote -v && cd ../.. && git rm -r ${SUB}
}

function addsub() {
    URL=$1
    SUB=$2
    git submodule add ${URL} ${SUB} && cd ${SUB} && git reset --hard && cd ../.. && git commit
}
# }}}

compctl -g '~/.teamocil/*(:t:r)' teamocil

# Search Google {{{

function google {
    Q="$@";
    GOOG_URL='https://www.google.de/search?tbs=li:1&q=';
    AGENT="Mozilla/4.0";
    stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}${Q//\ /+}" | grep -oP '\/url\?q=.+?&amp' | sed 's|/url?q=||; s|&amp||');
    echo -e "${stream//\%/\x}";
}

function goo {
    Q="$@";
    GOO_URL='https://www.google.com/search?q=';
    open "${GOO_URL}${Q//\ /+}"
}

# }}}

explain() {
  # base url with first command already injected
  # $ explain tar
  #   => http://explainshel.com/explain/tar?args=
  url="http://explainshell.com/explain/$1?args="

  # removes $1 (tar) from arguments ($@)
  shift;

  # iterates over remaining args and adds builds the rest of the url
  for i in "$@"; do
    url=$url"$i""+"
  done

  # opens url in browser
  open "$url"
}

# alias last and save {{{
# use `als c NAME` to chop off the last argument (for filenames/patterns)
# http://brettterpstra.com/2013/08/30/easily-save-that-wicked-awesome-shell-command/
als() {
    local aliasfile chop x
    [[ $# == 0 ]] && echo "Name your alias" && return
    if [[ $1 == "c" ]]; then
        chop=true
        shift
    fi
    aliasfile=~/bin/dotfiles/bash/aliases
    touch $aliasfile
    if [[ `cat "$aliasfile" |grep "alias ${1// /}="` != "" ]]; then
        echo "Alias ${1// /} already exists"
    else
        x=`fc -l -2 | sed -e '$!{h;d;}' -e x | sed -e 's/.\{7\}//'`
        if [[ $chop == true ]]; then
            echo "Chopping..."
            x=$(echo $x | rev | cut -d " " -f2- | rev)
        fi
        echo -e "\nalias ${1// /}=\"`echo $x|sed -e 's/ *$//'|sed -e 's/\"/\\\\"/g'`\"" >> $aliasfile && source $aliasfile
        alias $1
    fi
}

# }}}

source /usr/local/etc/profile.d/z.sh

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
